package java01;

/*
    자바의 개요
    자바(Java)는 객체 지향 언어의 하나로서, 자바 가상 머신(JVM)을 사용하여
    운영체제와 독립적으로 동작하는 프로그래밍 언어이다. 때문에, windows, mac,
    linux 같은 여러 운영체제에서 같은 형태로 실행될 수 있다.

    자바의 장점
        - 운영체제와 독립적으로 실행할 수 있다.
        - 다른 객체기반 언어에 비해 난이도가 비교적 낮다.
        - 자동으로 메모리를 관리하여 안정성이 높다.
        - 연산자 오버로딩을 금지하고, 제네릭을 도입하여 가독성이 높다.
            ※ 제네릭(Generic)은 클래스 내부에서 타입이 지정되는 것이 아니라
              사용자에 의해 지정되는 것을 말한다. 코드의 재사용성이 높아진다.
        - 수많은 참고 자료들을 찾을 수 있다.

    자바의 단점
        - JVM을 거쳐서 실행되므로, 실행 속도가 느려진다.
        - 예외 처리가 잘 되어있지만, 개발자가 일일히 지정해 주어야만 한다.
        - 다른 언어에 비해서 코드의 길이가 긴 편이다.
*/
/*
    자바의 실행 과정
    자바 클래스 파일 => 자바 컴파일러 => 자바 바이트 코드 => 자바 가상 머신

    자바 컴파일러(Java Compiler)
        .java 형식의 자바 소스 코드를 JVM이 이해할 수 있는 바이트 코드로 변환한다.
        자바를 설치할 때 javac.exe의 형태로 설치된다.

    자바 바이트 코드(Java Bytecode)
        .class 형식의 JVM이 이해할 수 있는 언어로 변환된 자바 소스 코드를 의미하며,
        변환되는 코드의 크기가 1Byte라서 자바 바이트 코드로 불리고 있다.

    자바 가상 머신(Java Virtual Machine)
        여러 운영체제에서 자바 프로그램을 실행하기 위한 가상의 기계로서, 반드시 설치되어
        있어야만 자바 프로그램을 실행할 수 있다. 운영체제에 관계없이 실행할 수 있지만,
        실행 속도가 느리다는 단점을 갖고 있다.

    자바 인터프리터(interpreter)
        자바 컴파일러로 변환된 바이트 코드(.class)를 해석하는 역할을 수행한다.

    클래스 로더(class loader)
        동적으로 클래스를 로딩해주는 역할을 하는 것이 클래스 로더이다.

    JIT 컴파일러(Just-In-Time Compiler)
        실행 중인 런타임에 실제로 기계어로 변환해주는 컴파일러를 의미하며, 프로그램
        의 실행 속도를 향상시키기 위해 "동적 번역"으로 불리는 기법이 개발되었다.

    가비지 컬렉터(Garbage Collector)
        사용하지 않는 메모리를 자동으로 회수해준다. 개발자가 메모리를 관리하지 않아도
        되므로, 생산성이 증가한다.
*/
/*
    자바 프로그램은 한 개 이상의 클래스(class)로 구성된다.
    클래스(class)는 한 개 이상의 필드(field) | 메소드(method)로 구성된다.
*/

class JavaBasics {
    // 필드 선언.
    int fieldInt;
    String fieldString;

    // 메소드 선언.
    public void method1() {
        System.out.println("Java Programming(Method)");
    }

    // 메인 메소드.
    // ※ 메인 메소드는 파일마다 하나씩만 가질 수 있다.
    public static void main(String[] args) {
        // 명령문(Statement) : 자바 프로그램의 동작을 명시하고, 알려주는 문장. 세미콜론으로 끝난다.
        // 모니터에 전달된 데이터를 출력한다.
        System.out.print("Java Programming(Print)\n");
        // 모니터에 전달된 데이터를 출력하고 줄 바꿈을 한다.
        System.out.println("Java Programming(println)");
        // 문자열끼리 연결도 가능하다.
        System.out.println("Java" + " Programming(connect)");
    }
}
